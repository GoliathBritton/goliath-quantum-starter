# NQBA Platform - Centralized Logging Stack
# Loki + Fluent Bit for log aggregation and analysis

# =============================================================================
# Loki Configuration
# =============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: monitoring
data:
  loki.yaml: |
    auth_enabled: false
    
    server:
      http_listen_port: 3100
      grpc_listen_port: 9096
      log_level: info
    
    common:
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules
      replication_factor: 1
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: inmemory
    
    query_range:
      results_cache:
        cache:
          embedded_cache:
            enabled: true
            max_size_mb: 100
    
    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    
    ruler:
      alertmanager_url: http://alertmanager:9093
      storage:
        type: local
        local:
          directory: /loki/rules
      rule_path: /loki/rules
      ring:
        kvstore:
          store: inmemory
      enable_api: true
      enable_alertmanager_v2: true
    
    analytics:
      reporting_enabled: false
    
    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      ingestion_rate_mb: 16
      ingestion_burst_size_mb: 32
      max_streams_per_user: 10000
      max_line_size: 256000
      max_entries_limit_per_query: 5000
      max_global_streams_per_user: 5000
      max_chunks_per_query: 2000000
      max_query_length: 721h
      max_query_parallelism: 32
      max_query_series: 500
      cardinality_limit: 100000
      max_concurrent_tail_requests: 10
      retention_period: 744h  # 31 days
    
    chunk_store_config:
      max_look_back_period: 0s
    
    table_manager:
      retention_deletes_enabled: true
      retention_period: 744h  # 31 days
    
    compactor:
      working_directory: /loki/compactor
      shared_store: filesystem
      compaction_interval: 10m
      retention_enabled: true
      retention_delete_delay: 2h
      retention_delete_worker_count: 150

---
# Loki Rules ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-rules
  namespace: monitoring
data:
  nqba-log-rules.yaml: |
    groups:
      - name: nqba-log-alerts
        rules:
          - alert: HighErrorRate
            expr: |
              (
                sum(rate({app="nqba-platform", level="error"}[5m])) by (component)
                /
                sum(rate({app="nqba-platform"}[5m])) by (component)
              ) > 0.05
            for: 5m
            labels:
              severity: warning
              service: "{{ $labels.component }}"
            annotations:
              summary: "High error rate in {{ $labels.component }}"
              description: "Error rate is above 5% for {{ $labels.component }} for 5 minutes"
          
          - alert: CriticalErrors
            expr: |
              sum(rate({app="nqba-platform", level="critical"}[1m])) by (component) > 0
            for: 1m
            labels:
              severity: critical
              service: "{{ $labels.component }}"
            annotations:
              summary: "Critical errors detected in {{ $labels.component }}"
              description: "Critical level errors are being logged in {{ $labels.component }}"
          
          - alert: DatabaseConnectionErrors
            expr: |
              sum(rate({app="nqba-platform"} |~ "(?i)database.*connection.*error|connection.*refused|connection.*timeout"[5m])) > 0
            for: 2m
            labels:
              severity: critical
              service: database
            annotations:
              summary: "Database connection errors detected"
              description: "Database connection errors are occurring in the application"
          
          - alert: HighMemoryUsage
            expr: |
              sum(rate({app="nqba-platform"} |~ "(?i)memory.*error|out.*of.*memory|oom"[5m])) > 0
            for: 1m
            labels:
              severity: warning
              service: infrastructure
            annotations:
              summary: "Memory issues detected in logs"
              description: "Memory-related errors are appearing in application logs"
          
          - alert: SecurityAlerts
            expr: |
              sum(rate({app="nqba-platform"} |~ "(?i)unauthorized|forbidden|authentication.*failed|security.*violation"[1m])) > 0
            for: 1m
            labels:
              severity: critical
              service: security
            annotations:
              summary: "Security-related errors detected"
              description: "Security violations or authentication failures detected in logs"

---
# Loki Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: monitoring
  labels:
    app: loki
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      containers:
        - name: loki
          image: grafana/loki:2.9.0
          args:
            - -config.file=/etc/loki/loki.yaml
            - -target=all
          ports:
            - containerPort: 3100
              name: http
            - containerPort: 9096
              name: grpc
          env:
            - name: JAEGER_AGENT_HOST
              value: jaeger-agent
            - name: JAEGER_ENDPOINT
              value: http://jaeger-collector:14268/api/traces
            - name: JAEGER_SAMPLER_TYPE
              value: const
            - name: JAEGER_SAMPLER_PARAM
              value: "1"
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          volumeMounts:
            - name: loki-config
              mountPath: /etc/loki
            - name: loki-rules
              mountPath: /loki/rules
            - name: loki-storage
              mountPath: /loki
          livenessProbe:
            httpGet:
              path: /ready
              port: 3100
            initialDelaySeconds: 45
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: 3100
            initialDelaySeconds: 45
            timeoutSeconds: 30
      volumes:
        - name: loki-config
          configMap:
            name: loki-config
        - name: loki-rules
          configMap:
            name: loki-rules
        - name: loki-storage
          persistentVolumeClaim:
            claimName: loki-storage

---
# Loki Service
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: monitoring
  labels:
    app: loki
spec:
  type: ClusterIP
  ports:
    - port: 3100
      targetPort: 3100
      name: http
    - port: 9096
      targetPort: 9096
      name: grpc
  selector:
    app: loki

---
# Loki Storage PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: loki-storage
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: gp3

---
# =============================================================================
# Fluent Bit Configuration
# =============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: monitoring
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         1
        Log_Level     info
        Daemon        off
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020
        Health_Check  On
    
    [INPUT]
        Name              tail
        Tag               kube.*
        Path              /var/log/containers/*.log
        Parser            cri
        DB                /var/log/flb_kube.db
        Mem_Buf_Limit     50MB
        Skip_Long_Lines   On
        Refresh_Interval  10
    
    [INPUT]
        Name              systemd
        Tag               host.*
        Systemd_Filter    _SYSTEMD_UNIT=kubelet.service
        Systemd_Filter    _SYSTEMD_UNIT=docker.service
        Systemd_Filter    _SYSTEMD_UNIT=containerd.service
    
    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix     kube.var.log.containers.
        Merge_Log           On
        Merge_Log_Key       log_processed
        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off
        Annotations         Off
        Labels              On
    
    [FILTER]
        Name                nest
        Match               kube.*
        Operation           lift
        Nested_under        kubernetes
        Add_prefix          kubernetes_
    
    [FILTER]
        Name                modify
        Match               kube.*
        Remove              kubernetes_pod_id
        Remove              kubernetes_docker_id
        Remove              kubernetes_container_hash
    
    [FILTER]
        Name                grep
        Match               kube.*
        Regex               kubernetes_namespace_name ^(nqba-platform|monitoring|kube-system)$
    
    [FILTER]
        Name                parser
        Match               kube.*
        Key_Name            log
        Parser              json
        Reserve_Data        On
        Preserve_Key        On
    
    [FILTER]
        Name                lua
        Match               kube.*
        Script              /fluent-bit/scripts/enhance_logs.lua
        Call                enhance_logs
    
    [OUTPUT]
        Name                loki
        Match               kube.*
        Host                loki.monitoring.svc.cluster.local
        Port                3100
        Labels              job=fluent-bit, app=$kubernetes_labels_app, component=$kubernetes_labels_component, namespace=$kubernetes_namespace_name, pod=$kubernetes_pod_name, container=$kubernetes_container_name
        Label_keys          $level,$logger,$trace_id,$user_id
        Remove_keys         kubernetes_labels_app, kubernetes_labels_component, kubernetes_namespace_name, kubernetes_pod_name, kubernetes_container_name
        Line_format         json
        Json_date_key       timestamp
        Json_date_format    %Y-%m-%dT%H:%M:%S.%L%z
    
    [OUTPUT]
        Name                loki
        Match               host.*
        Host                loki.monitoring.svc.cluster.local
        Port                3100
        Labels              job=fluent-bit, component=systemd
        Line_format         json
  
  parsers.conf: |
    [PARSER]
        Name        cri
        Format      regex
        Regex       ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<log>.*)$
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z
    
    [PARSER]
        Name        json
        Format      json
        Time_Key    timestamp
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z
        Time_Keep   On
    
    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z
        Time_Keep   On
    
    [PARSER]
        Name        nginx
        Format      regex
        Regex       ^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$
        Time_Key    time
        Time_Format %d/%b/%Y:%H:%M:%S %z
  
  enhance_logs.lua: |
    function enhance_logs(tag, timestamp, record)
        -- Add severity level mapping
        if record.level then
            local level = string.lower(record.level)
            if level == "error" or level == "err" then
                record.severity = "error"
            elseif level == "warn" or level == "warning" then
                record.severity = "warning"
            elseif level == "info" or level == "information" then
                record.severity = "info"
            elseif level == "debug" then
                record.severity = "debug"
            else
                record.severity = "unknown"
            end
        end
        
        -- Extract trace ID from various formats
        if record.log then
            local trace_id = string.match(record.log, "trace[_-]?id[=:]?%s*([%w%-]+)")
            if trace_id then
                record.trace_id = trace_id
            end
        end
        
        -- Extract user ID from logs
        if record.log then
            local user_id = string.match(record.log, "user[_-]?id[=:]?%s*([%w%-]+)")
            if user_id then
                record.user_id = user_id
            end
        end
        
        -- Add environment information
        record.environment = "production"
        record.cluster = "nqba-production"
        
        return 1, timestamp, record
    end

---
# Fluent Bit DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  namespace: monitoring
  labels:
    app: fluent-bit
spec:
  selector:
    matchLabels:
      app: fluent-bit
  template:
    metadata:
      labels:
        app: fluent-bit
    spec:
      serviceAccountName: fluent-bit
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
      containers:
        - name: fluent-bit
          image: fluent/fluent-bit:2.1.8
          ports:
            - containerPort: 2020
              name: http
          env:
            - name: FLUENT_CONF
              value: fluent-bit.conf
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          resources:
            requests:
              memory: "64Mi"
              cpu: "100m"
            limits:
              memory: "128Mi"
              cpu: "200m"
          volumeMounts:
            - name: fluent-bit-config
              mountPath: /fluent-bit/etc
            - name: fluent-bit-scripts
              mountPath: /fluent-bit/scripts
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: etcmachineid
              mountPath: /etc/machine-id
              readOnly: true
          livenessProbe:
            httpGet:
              path: /api/v1/health
              port: 2020
            initialDelaySeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: 2020
            initialDelaySeconds: 10
            timeoutSeconds: 10
      volumes:
        - name: fluent-bit-config
          configMap:
            name: fluent-bit-config
        - name: fluent-bit-scripts
          configMap:
            name: fluent-bit-config
            items:
              - key: enhance_logs.lua
                path: enhance_logs.lua
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: etcmachineid
          hostPath:
            path: /etc/machine-id
            type: File

---
# Fluent Bit ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluent-bit
  namespace: monitoring

---
# Fluent Bit ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluent-bit
rules:
  - apiGroups: [""]
    resources:
      - namespaces
      - pods
      - nodes
      - nodes/proxy
    verbs: ["get", "list", "watch"]

---
# Fluent Bit ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluent-bit
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fluent-bit
subjects:
  - kind: ServiceAccount
    name: fluent-bit
    namespace: monitoring

---
# Fluent Bit Service
apiVersion: v1
kind: Service
metadata:
  name: fluent-bit
  namespace: monitoring
  labels:
    app: fluent-bit
spec:
  type: ClusterIP
  ports:
    - port: 2020
      targetPort: 2020
      name: http
  selector:
    app: fluent-bit