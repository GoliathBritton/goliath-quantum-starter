# NQBA Platform - Grafana and AlertManager Configuration
# Complete observability stack with dashboards and alerting

# =============================================================================
# Grafana Configuration
# =============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    
    [grafana_net]
    url = https://grafana.net
    
    [log]
    mode = console
    level = info
    
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    
    [server]
    protocol = http
    http_port = 3000
    domain = grafana.nqba.flyfox.ai
    enforce_domain = false
    root_url = https://grafana.nqba.flyfox.ai
    serve_from_sub_path = false
    
    [database]
    type = sqlite3
    path = grafana.db
    
    [session]
    provider = file
    
    [security]
    admin_user = admin
    admin_password = $__env{GF_SECURITY_ADMIN_PASSWORD}
    secret_key = $__env{GF_SECURITY_SECRET_KEY}
    disable_gravatar = false
    data_source_proxy_whitelist =
    
    [snapshots]
    external_enabled = true
    external_snapshot_url = https://snapshots-origin.raintank.io
    external_snapshot_name = Publish to snapshot.raintank.io
    
    [dashboards]
    versions_to_keep = 20
    
    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_id = 1
    auto_assign_org_role = Viewer
    verify_email_enabled = false
    login_hint = email or username
    default_theme = dark
    
    [auth]
    login_cookie_name = grafana_sess
    login_maximum_inactive_lifetime_duration = 7d
    login_maximum_lifetime_duration = 30d
    token_rotation_interval_minutes = 10
    disable_login_form = false
    disable_signout_menu = false
    signout_redirect_url =
    oauth_auto_login = false
    
    [smtp]
    enabled = true
    host = $__env{GF_SMTP_HOST}
    user = $__env{GF_SMTP_USER}
    password = $__env{GF_SMTP_PASSWORD}
    cert_file =
    key_file =
    skip_verify = false
    from_address = alerts@nqba.flyfox.ai
    from_name = NQBA Grafana
    ehlo_identity = grafana.nqba.flyfox.ai
    
    [alerting]
    enabled = true
    execute_alerts = true
    error_or_timeout = alerting
    nodata_or_nullvalues = no_data
    concurrent_render_limit = 5
    evaluation_timeout_seconds = 30
    notification_timeout_seconds = 30
    max_attempts = 3
    min_interval_seconds = 1

---
# Grafana Datasources
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: true
        jsonData:
          timeInterval: 15s
          queryTimeout: 60s
          httpMethod: POST
      
      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100
        editable: true
        jsonData:
          maxLines: 1000
          derivedFields:
            - datasourceUid: Prometheus
              matcherRegex: "traceID=(\\w+)"
              name: TraceID
              url: "$${__value.raw}"
      
      - name: AlertManager
        type: alertmanager
        access: proxy
        url: http://alertmanager:9093
        editable: true
        jsonData:
          implementation: prometheus

---
# Grafana Dashboards ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'NQBA Dashboards'
        orgId: 1
        folder: 'NQBA'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards

---
# NQBA API Dashboard
apiVersion: v1
kind: ConfigMap
metadata:
  name: nqba-api-dashboard
  namespace: monitoring
data:
  nqba-api.json: |
    {
      "dashboard": {
        "id": null,
        "title": "NQBA API Metrics",
        "tags": ["nqba", "api"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"nqba-api\"}[5m])",
                "legendFormat": "Requests/sec"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {"mode": "palette-classic"},
                "unit": "reqps"
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Response Time",
            "type": "timeseries",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"nqba-api\"}[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, rate(http_request_duration_seconds_bucket{job=\"nqba-api\"}[5m]))",
                "legendFormat": "50th percentile"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {"mode": "palette-classic"},
                "unit": "s"
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"nqba-api\",status=~\"5..\"}[5m]) / rate(http_requests_total{job=\"nqba-api\"}[5m])",
                "legendFormat": "5xx Error Rate"
              },
              {
                "expr": "rate(http_requests_total{job=\"nqba-api\",status=~\"4..\"}[5m]) / rate(http_requests_total{job=\"nqba-api\"}[5m])",
                "legendFormat": "4xx Error Rate"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {"mode": "palette-classic"},
                "unit": "percentunit"
              }
            },
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
        - name: grafana
          image: grafana/grafana:10.0.0
          ports:
            - containerPort: 3000
              name: http
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: admin-password
            - name: GF_SECURITY_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: secret-key
            - name: GF_SMTP_HOST
              value: "smtp.gmail.com:587"
            - name: GF_SMTP_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: smtp-user
            - name: GF_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: smtp-password
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          volumeMounts:
            - name: grafana-config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
            - name: grafana-storage
              mountPath: /var/lib/grafana
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 30
      volumes:
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboards-config
          configMap:
            name: grafana-dashboards-config
        - name: grafana-dashboards
          configMap:
            name: nqba-api-dashboard
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      name: http
  selector:
    app: grafana

---
# Grafana Storage PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3

---
# =============================================================================
# AlertManager Configuration
# =============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: monitoring
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'alerts@nqba.flyfox.ai'
      smtp_auth_username: 'alerts@nqba.flyfox.ai'
      smtp_auth_password: '${SMTP_PASSWORD}'
      slack_api_url: '${SLACK_WEBHOOK_URL}'
    
    templates:
      - '/etc/alertmanager/templates/*.tmpl'
    
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
      routes:
        - match:
            severity: critical
          receiver: 'critical-alerts'
          group_wait: 5s
          repeat_interval: 30m
        - match:
            severity: warning
          receiver: 'warning-alerts'
          group_wait: 30s
          repeat_interval: 2h
        - match:
            service: nqba-api
          receiver: 'api-alerts'
        - match:
            service: nqba-worker
          receiver: 'worker-alerts'
        - match:
            service: postgresql
          receiver: 'database-alerts'
        - match:
            service: redis
          receiver: 'cache-alerts'
    
    receivers:
      - name: 'web.hook'
        webhook_configs:
          - url: 'http://webhook-receiver:8080/webhook'
            send_resolved: true
      
      - name: 'critical-alerts'
        email_configs:
          - to: 'ops-team@nqba.flyfox.ai'
            subject: '🚨 CRITICAL: {{ .GroupLabels.alertname }}'
            body: |
              {{ range .Alerts }}
              Alert: {{ .Annotations.summary }}
              Description: {{ .Annotations.description }}
              Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
              {{ end }}
        slack_configs:
          - channel: '#alerts-critical'
            title: '🚨 Critical Alert'
            text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
            send_resolved: true
        pagerduty_configs:
          - routing_key: '${PAGERDUTY_INTEGRATION_KEY}'
            description: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
      
      - name: 'warning-alerts'
        email_configs:
          - to: 'dev-team@nqba.flyfox.ai'
            subject: '⚠️ WARNING: {{ .GroupLabels.alertname }}'
            body: |
              {{ range .Alerts }}
              Alert: {{ .Annotations.summary }}
              Description: {{ .Annotations.description }}
              Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
              {{ end }}
        slack_configs:
          - channel: '#alerts-warning'
            title: '⚠️ Warning Alert'
            text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
            send_resolved: true
      
      - name: 'api-alerts'
        slack_configs:
          - channel: '#api-alerts'
            title: 'API Alert: {{ .GroupLabels.alertname }}'
            text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
            send_resolved: true
      
      - name: 'worker-alerts'
        slack_configs:
          - channel: '#worker-alerts'
            title: 'Worker Alert: {{ .GroupLabels.alertname }}'
            text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
            send_resolved: true
      
      - name: 'database-alerts'
        email_configs:
          - to: 'dba-team@nqba.flyfox.ai'
            subject: 'Database Alert: {{ .GroupLabels.alertname }}'
        slack_configs:
          - channel: '#database-alerts'
            title: 'Database Alert: {{ .GroupLabels.alertname }}'
            text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
            send_resolved: true
      
      - name: 'cache-alerts'
        slack_configs:
          - channel: '#infrastructure-alerts'
            title: 'Cache Alert: {{ .GroupLabels.alertname }}'
            text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
            send_resolved: true
    
    inhibit_rules:
      - source_match:
          severity: 'critical'
        target_match:
          severity: 'warning'
        equal: ['alertname', 'cluster', 'service']

---
# AlertManager Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: monitoring
  labels:
    app: alertmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
        - name: alertmanager
          image: prom/alertmanager:v0.25.0
          args:
            - '--config.file=/etc/alertmanager/alertmanager.yml'
            - '--storage.path=/alertmanager'
            - '--web.external-url=https://alertmanager.nqba.flyfox.ai'
            - '--cluster.listen-address=0.0.0.0:9094'
          ports:
            - containerPort: 9093
              name: web
            - containerPort: 9094
              name: cluster
          env:
            - name: SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: alertmanager-secrets
                  key: smtp-password
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: alertmanager-secrets
                  key: slack-webhook-url
            - name: PAGERDUTY_INTEGRATION_KEY
              valueFrom:
                secretKeyRef:
                  name: alertmanager-secrets
                  key: pagerduty-key
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          volumeMounts:
            - name: alertmanager-config
              mountPath: /etc/alertmanager
            - name: alertmanager-storage
              mountPath: /alertmanager
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9093
            initialDelaySeconds: 30
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9093
            initialDelaySeconds: 30
            timeoutSeconds: 30
      volumes:
        - name: alertmanager-config
          configMap:
            name: alertmanager-config
        - name: alertmanager-storage
          persistentVolumeClaim:
            claimName: alertmanager-storage

---
# AlertManager Service
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: monitoring
  labels:
    app: alertmanager
spec:
  type: ClusterIP
  ports:
    - port: 9093
      targetPort: 9093
      name: web
    - port: 9094
      targetPort: 9094
      name: cluster
  selector:
    app: alertmanager

---
# AlertManager Storage PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alertmanager-storage
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3