version: '3.8'

services:
  # NQBA API Server
  api:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.api
      target: development
    ports:
      - "8000:8000"
    environment:
      - NQBA_DEBUG=true
      - NQBA_DATABASE_URL=postgresql://nqba:nqba_password@postgres:5432/nqba
      - NQBA_REDIS_URL=redis://redis:6379/0
      - NQBA_SECRET_KEY=dev-secret-key-change-in-production
      - NQBA_CORS_ORIGINS=http://localhost:3000,http://localhost:8080
    volumes:
      - ../../src:/app/src
      - ../../api_server.py:/app/api_server.py
      - api_logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - nqba-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ../../landing-page
      dockerfile: ../deploy/docker/Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
    volumes:
      - ../../landing-page:/app
      - /app/node_modules
      - /app/.next
    networks:
      - nqba-network
    restart: unless-stopped
    depends_on:
      - api

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=nqba
      - POSTGRES_USER=nqba
      - POSTGRES_PASSWORD=nqba_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - nqba-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nqba -d nqba"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass redis_password
    environment:
      - REDIS_PASSWORD=redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - nqba-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Background Worker
  worker:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.worker
      target: development
    environment:
      - NQBA_DEBUG=true
      - NQBA_DATABASE_URL=postgresql://nqba:nqba_password@postgres:5432/nqba
      - NQBA_REDIS_URL=redis://redis:6379/0
      - NQBA_SECRET_KEY=dev-secret-key-change-in-production
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ../../src:/app/src
      - worker_logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - nqba-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - frontend
    networks:
      - nqba-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nqba-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - nqba-network
    restart: unless-stopped

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - nqba-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  worker_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  nqba-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16