# NQBA Platform - Production Docker Compose Configuration
# Optimized for production deployment with security and performance

version: '3.8'

services:
  # =============================================================================
  # NQBA API Server - Main Application
  # =============================================================================
  nqba-api:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.api
      target: runtime
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
        - VERSION=${VERSION:-latest}
    image: nqba-platform/api:${VERSION:-latest}
    container_name: nqba-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      # Core Configuration
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WORKERS=${WORKERS:-4}
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # Database
      - DATABASE_URL=${DATABASE_URL:-postgresql://nqba:${POSTGRES_PASSWORD}@postgres:5432/nqba_platform}
      - DATABASE_POOL_SIZE=${DATABASE_POOL_SIZE:-20}
      - DATABASE_MAX_OVERFLOW=${DATABASE_MAX_OVERFLOW:-30}
      
      # Redis
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - REDIS_POOL_SIZE=${REDIS_POOL_SIZE:-20}
      
      # External APIs
      - DYNEX_API_KEY=${DYNEX_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FLYFOX_API_KEY=${FLYFOX_API_KEY}
      
      # Monitoring
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - TRACING_ENABLED=${TRACING_ENABLED:-true}
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT}
      
      # Performance
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - CACHE_TTL=${CACHE_TTL:-3600}
    volumes:
      - api_logs:/app/logs
      - api_data:/app/data
      - api_tmp:/app/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nqba-backend
      - nqba-frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '${API_CPU_LIMIT:-2.0}'
          memory: ${API_MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${API_CPU_RESERVATION:-1.0}'
          memory: ${API_MEMORY_RESERVATION:-1G}
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/tmp:noexec,nosuid,size=200m

  # =============================================================================
  # Frontend Application (Optional for development)
  # =============================================================================
  nqba-frontend:
    build:
      context: ../../landing-page
      dockerfile: Dockerfile
      target: production
    image: nqba-platform/frontend:${VERSION:-latest}
    container_name: nqba-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-https://api.flyfox.ai}
      - REACT_APP_ENVIRONMENT=${ENVIRONMENT:-production}
      - REACT_APP_VERSION=${VERSION:-latest}
    networks:
      - nqba-frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '${FRONTEND_CPU_LIMIT:-0.5}'
          memory: ${FRONTEND_MEMORY_LIMIT:-256M}
        reservations:
          cpus: '${FRONTEND_CPU_RESERVATION:-0.25}'
          memory: ${FRONTEND_MEMORY_RESERVATION:-128M}
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/cache/nginx:noexec,nosuid,size=50m

  # =============================================================================
  # PostgreSQL Database - Primary Data Store
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: nqba-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-nqba_platform}
      - POSTGRES_USER=${POSTGRES_USER:-nqba}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
      - ../configs/database.prod.yaml:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - nqba-backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nqba} -d ${POSTGRES_DB:-nqba_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '${POSTGRES_CPU_LIMIT:-1.0}'
          memory: ${POSTGRES_MEMORY_LIMIT:-1G}
        reservations:
          cpus: '${POSTGRES_CPU_RESERVATION:-0.5}'
          memory: ${POSTGRES_MEMORY_RESERVATION:-512M}
    security_opt:
      - no-new-privileges:true
    command: >
      postgres
      -c shared_buffers=256MB
      -c max_connections=200
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=mod
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on

  # =============================================================================
  # Redis Cache - Session Store and Caching
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: nqba-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    networks:
      - nqba-backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '${REDIS_CPU_LIMIT:-0.5}'
          memory: ${REDIS_MEMORY_LIMIT:-512M}
        reservations:
          cpus: '${REDIS_CPU_RESERVATION:-0.25}'
          memory: ${REDIS_MEMORY_RESERVATION:-256M}
    security_opt:
      - no-new-privileges:true
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16

  # Background Worker
  worker:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.worker
      target: development
    environment:
      - NQBA_DEBUG=true
      - NQBA_DATABASE_URL=postgresql://nqba:nqba_password@postgres:5432/nqba
      - NQBA_REDIS_URL=redis://redis:6379/0
      - NQBA_SECRET_KEY=dev-secret-key-change-in-production
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ../../src:/app/src
      - worker_logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - nqba-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - frontend
    networks:
      - nqba-network
    restart: unless-stopped

  # =============================================================================
  # Monitoring and Observability (Optional)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: nqba-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
      - ../configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - nqba-monitoring
      - nqba-backend
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: nqba-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../configs/grafana:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - nqba-monitoring
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    profiles:
      - monitoring

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - nqba-network
    restart: unless-stopped

# =============================================================================
# Volumes - Persistent Data Storage
# =============================================================================
volumes:
  # Database
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  postgres_logs:
    driver: local
  
  # Cache
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  redis_logs:
    driver: local
  
  # Application
  api_logs:
    driver: local
  api_data:
    driver: local
  api_tmp:
    driver: local
  
  # Monitoring
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# Networks - Service Communication
# =============================================================================
networks:
  # Backend services (API, Database, Cache)
  nqba-backend:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.20.1.0/24
          gateway: 172.20.1.1
  
  # Frontend services
  nqba-frontend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.2.0/24
          gateway: 172.20.2.1
  
  # Monitoring services
  nqba-monitoring:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.20.3.0/24
          gateway: 172.20.3.1