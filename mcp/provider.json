{
  "name": "flyfox-ai-quantum",
  "version": "1.0.0",
  "description": "FLYFOX AI Quantum Integration Hub - Powered by NQBA",
  "author": "FLYFOX AI",
  "license": "MIT",
  "repository": "https://github.com/FLYFOX-AI/flyfoxai-nqba-core",
  "homepage": "https://flyfox-ai.github.io/nqba-core",
  "keywords": [
    "quantum-computing",
    "optimization",
    "machine-learning",
    "nqba",
    "flyfox-ai",
    "mcp"
  ],
  "tools": [
    {
      "name": "quantum.optimize.qubo",
      "description": "Optimize a QUBO problem using quantum computing",
      "inputSchema": {
        "type": "object",
        "properties": {
          "qubo_matrix": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "QUBO matrix (quadratic terms)"
          },
          "linear_terms": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Linear terms"
          },
          "constraints": {
            "type": "object",
            "description": "Problem constraints"
          },
          "preferred_provider": {
            "type": "string",
            "description": "Preferred quantum provider"
          },
          "max_runtime": {
            "type": "integer",
            "description": "Maximum runtime in seconds"
          }
        },
        "required": ["qubo_matrix"]
      }
    },
    {
      "name": "quantum.optimize.portfolio",
      "description": "Optimize investment portfolio using quantum algorithms",
      "inputSchema": {
        "type": "object",
        "properties": {
          "assets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of asset symbols"
          },
          "returns": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Historical returns matrix"
          },
          "risk_tolerance": {
            "type": "number",
            "description": "Risk tolerance (0-1)"
          },
          "target_return": {
            "type": "number",
            "description": "Target annual return"
          }
        },
        "required": ["assets", "returns"]
      }
    },
    {
      "name": "quantum.llm.generate",
      "description": "Generate text using quantum-driven LLM (qdLLM) and QNLP pipeline with Dynex",
      "inputSchema": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Input prompt for text generation"
          },
          "context": {
            "type": "string",
            "description": "Additional context for generation"
          },
          "temperature": {
            "type": "number",
            "description": "Temperature for generation (0-2)"
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum tokens to generate"
          },
          "use_quantum_enhancement": {
            "type": "boolean",
            "description": "Whether to use quantum enhancement"
          }
        },
        "required": ["prompt"]
      }
    },
    {
      "name": "quantum.score.lead",
      "description": "Score leads using quantum-enhanced algorithms",
      "inputSchema": {
        "type": "object",
        "properties": {
          "lead_data": {
            "type": "object",
            "description": "Lead information and attributes"
          },
          "scoring_model": {
            "type": "string",
            "description": "Scoring model to use"
          },
          "use_quantum": {
            "type": "boolean",
            "description": "Whether to use quantum enhancement"
          }
        },
        "required": ["lead_data"]
      }
    },
    {
      "name": "quantum.optimize.schedule",
      "description": "Optimize scheduling using quantum algorithms",
      "inputSchema": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of tasks to schedule"
          },
          "resources": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Available resources"
          },
          "constraints": {
            "type": "object",
            "description": "Scheduling constraints"
          }
        },
        "required": ["tasks", "resources"]
      }
    },
    {
      "name": "openai.generate",
      "description": "Generate text using OpenAI with quantum enhancement",
      "inputSchema": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Input prompt for generation"
          },
          "model": {
            "type": "string",
            "description": "OpenAI model to use",
            "default": "gpt-4o"
          },
          "temperature": {
            "type": "number",
            "description": "Temperature for generation (0-2)",
            "default": 0.7
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum tokens to generate",
            "default": 1000
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to stream response",
            "default": false
          },
          "functions": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Function definitions for function calling"
          },
          "use_quantum_enhancement": {
            "type": "boolean",
            "description": "Whether to use quantum enhancement",
            "default": true
          }
        },
        "required": ["prompt"]
      }
    },
    {
      "name": "openai.embeddings",
      "description": "Generate embeddings using OpenAI with quantum enhancement",
      "inputSchema": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text to generate embeddings for"
          },
          "model": {
            "type": "string",
            "description": "Embedding model to use",
            "default": "text-embedding-3-small"
          },
          "use_quantum_enhancement": {
            "type": "boolean",
            "description": "Whether to use quantum enhancement",
            "default": true
          }
        },
        "required": ["text"]
      }
    },
    {
      "name": "nvidia.simulate.quantum",
      "description": "Simulate quantum algorithms using NVIDIA cuQuantum",
      "inputSchema": {
        "type": "object",
        "properties": {
          "qubits": {
            "type": "integer",
            "description": "Number of qubits to simulate"
          },
          "algorithm": {
            "type": "string",
            "description": "Quantum algorithm to simulate",
            "enum": ["qaoa", "vqe", "grover", "shor"],
            "default": "qaoa"
          },
          "parameters": {
            "type": "object",
            "description": "Algorithm-specific parameters"
          },
          "precision": {
            "type": "string",
            "description": "Numerical precision",
            "enum": ["float16", "float32", "float64"],
            "default": "float32"
          },
          "use_gpu": {
            "type": "boolean",
            "description": "Whether to use GPU acceleration",
            "default": true
          },
          "max_iterations": {
            "type": "integer",
            "description": "Maximum iterations for iterative algorithms",
            "default": 1000
          }
        },
        "required": ["qubits"]
      }
    },
    {
      "name": "nvidia.accelerate.inference",
      "description": "Accelerate AI inference using NVIDIA TensorRT",
      "inputSchema": {
        "type": "object",
        "properties": {
          "model_path": {
            "type": "string",
            "description": "Path to the model file"
          },
          "input_data": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Input data for inference"
          },
          "batch_size": {
            "type": "integer",
            "description": "Batch size for inference",
            "default": 1
          },
          "precision": {
            "type": "string",
            "description": "Precision mode",
            "enum": ["fp16", "fp32", "int8"],
            "default": "fp16"
          },
          "optimization_level": {
            "type": "integer",
            "description": "TensorRT optimization level (1-5)",
            "default": 3
          },
          "use_gpu": {
            "type": "boolean",
            "description": "Whether to use GPU acceleration",
            "default": true
          }
        },
        "required": ["model_path", "input_data"]
      }
    },
    {
      "name": "nvidia.gpu.info",
      "description": "Get information about available NVIDIA GPUs",
      "inputSchema": {
        "type": "object",
        "properties": {
          "include_memory": {
            "type": "boolean",
            "description": "Whether to include memory usage information",
            "default": true
          },
          "include_performance": {
            "type": "boolean",
            "description": "Whether to include performance metrics",
            "default": false
          }
        }
      }
    },
    {
      "name": "nvidia.optimize.energy",
      "description": "Optimize energy usage for different workload types",
      "inputSchema": {
        "type": "object",
        "properties": {
          "workload_type": {
            "type": "string",
            "description": "Type of workload to optimize for",
            "enum": ["quantum", "inference", "training", "mixed"],
            "default": "quantum"
          },
          "target_power": {
            "type": "number",
            "description": "Target power consumption in watts"
          },
          "performance_priority": {
            "type": "string",
            "description": "Performance vs power priority",
            "enum": ["performance", "balanced", "power"],
            "default": "balanced"
          }
        }
      }
    },
    {
      "name": "q_sales.create_pod",
      "description": "Create a new quantum-optimized sales pod with AI agents",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the sales pod"
          },
          "industry": {
            "type": "string",
            "description": "Target industry (e.g., SaaS, Insurance, Real Estate)"
          },
          "target_market": {
            "type": "string",
            "description": "Target market segment (e.g., Enterprise, SMB, Startups)"
          },
          "agent_count": {
            "type": "integer",
            "description": "Number of AI agents in the pod",
            "default": 5,
            "minimum": 1,
            "maximum": 50
          },
          "playbook_template": {
            "type": "string",
            "description": "Playbook template to use",
            "default": "standard"
          }
        },
        "required": ["name", "industry", "target_market"]
      }
    },
    {
      "name": "q_sales.optimize_pod",
      "description": "Optimize sales pod performance using quantum algorithms",
      "inputSchema": {
        "type": "object",
        "properties": {
          "pod_id": {
            "type": "string",
            "description": "ID of the sales pod to optimize"
          },
          "optimization_focus": {
            "type": "string",
            "description": "Focus area for optimization",
            "enum": ["scripts", "cadences", "lead_allocation", "agent_training", "all"],
            "default": "all"
          }
        },
        "required": ["pod_id"]
      }
    },
    {
      "name": "q_sales.get_pod_performance",
      "description": "Get comprehensive performance metrics for a sales pod",
      "inputSchema": {
        "type": "object",
        "properties": {
          "pod_id": {
            "type": "string",
            "description": "ID of the sales pod"
          },
          "include_agent_details": {
            "type": "boolean",
            "description": "Whether to include individual agent metrics",
            "default": false
          },
          "time_range": {
            "type": "string",
            "description": "Time range for metrics",
            "enum": ["day", "week", "month", "quarter", "all"],
            "default": "month"
          }
        },
        "required": ["pod_id"]
      }
    },
    {
      "name": "q_sales.scale_pod",
      "description": "Scale sales pod by adding or removing AI agents",
      "inputSchema": {
        "type": "object",
        "properties": {
          "pod_id": {
            "type": "string",
            "description": "ID of the sales pod to scale"
          },
          "target_agent_count": {
            "type": "integer",
            "description": "Target number of agents",
            "minimum": 1,
            "maximum": 100
          },
          "scaling_strategy": {
            "type": "string",
            "description": "Strategy for scaling",
            "enum": ["gradual", "immediate", "smart"],
            "default": "smart"
          }
        },
        "required": ["pod_id", "target_agent_count"]
      }
    },
    {
      "name": "q_sales.get_division_overview",
      "description": "Get overview of entire Q-Sales Division",
      "inputSchema": {
        "type": "object",
        "properties": {
          "include_pod_details": {
            "type": "boolean",
            "description": "Whether to include individual pod details",
            "default": false
          },
          "include_revenue_breakdown": {
            "type": "boolean",
            "description": "Whether to include revenue breakdown by pod",
            "default": true
          },
          "include_performance_trends": {
            "type": "boolean",
            "description": "Whether to include performance trends",
            "default": false
          }
        }
      }
    },
    {
      "name": "q_sales.train_agents",
      "description": "Train sales agents using quantum-enhanced learning",
      "inputSchema": {
        "type": "object",
        "properties": {
          "pod_id": {
            "type": "string",
            "description": "ID of the sales pod"
          },
          "training_focus": {
            "type": "string",
            "description": "Focus area for training",
            "enum": ["objection_handling", "closing_techniques", "lead_qualification", "product_knowledge", "all"],
            "default": "all"
          },
          "training_intensity": {
            "type": "string",
            "description": "Training intensity level",
            "enum": ["light", "moderate", "intensive"],
            "default": "moderate"
          },
          "use_quantum_enhancement": {
            "type": "boolean",
            "description": "Whether to use quantum enhancement for training",
            "default": true
          }
        },
        "required": ["pod_id"]
      }
    },
    {
      "name": "quantum_agent.make_call",
      "description": "Make an outbound call using quantum-enhanced AI",
      "inputSchema": {
        "type": "object",
        "properties": {
          "to_number": {
            "type": "string",
            "description": "Phone number to call"
          },
          "from_number": {
            "type": "string",
            "description": "Caller ID number"
          },
          "agent_id": {
            "type": "string",
            "description": "ID of the quantum agent"
          },
          "call_purpose": {
            "type": "string",
            "description": "Purpose of the call"
          },
          "script_template": {
            "type": "string",
            "description": "Optional script template"
          },
          "quantum_optimization": {
            "type": "boolean",
            "default": true,
            "description": "Enable quantum call optimization"
          },
          "gpu_acceleration": {
            "type": "boolean",
            "default": true,
            "description": "Enable NVIDIA GPU acceleration"
          }
        },
        "required": ["to_number", "from_number", "agent_id", "call_purpose"]
      }
    },
    {
      "name": "quantum_agent.get_analytics",
      "description": "Get call analytics with quantum insights",
      "inputSchema": {
        "type": "object",
        "properties": {
          "include_patterns": {
            "type": "boolean",
            "default": true,
            "description": "Include quantum pattern analysis"
          }
        }
      }
    },
    {
      "name": "quantum_agent.get_call_history",
      "description": "Get call history with optional filtering",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "default": 50,
            "description": "Maximum number of calls to return"
          },
          "status_filter": {
            "type": "string",
            "description": "Filter by call status"
          }
        }
      }
    },
    {
      "name": "quantum_agent.get_pricing_tiers",
      "description": "Get all available DIY and DFY pricing tiers",
      "inputSchema": {
        "type": "object",
        "properties": {
          "include_roi": {
            "type": "boolean",
            "default": true,
            "description": "Include ROI estimates"
          }
        }
      }
    },
    {
      "name": "quantum_agent.get_pricing_quote",
      "description": "Get pricing quote for specific tier and complexity",
      "inputSchema": {
        "type": "object",
        "properties": {
          "tier": {
            "type": "string",
            "enum": ["diy", "dfy"],
            "description": "Service tier (DIY or DFY)"
          },
          "complexity": {
            "type": "string",
            "enum": ["basic", "standard", "enterprise"],
            "description": "Use case complexity level"
          },
          "estimated_calls_per_month": {
            "type": "integer",
            "description": "Estimated monthly call volume for cost analysis"
          }
        },
        "required": ["tier", "complexity"]
      }
    },
    {
      "name": "quantum_agent.create_subscription",
      "description": "Create a new client subscription",
      "inputSchema": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Unique client identifier"
          },
          "company_name": {
            "type": "string",
            "description": "Company name"
          },
          "tier": {
            "type": "string",
            "enum": ["diy", "dfy"],
            "description": "Service tier (DIY or DFY)"
          },
          "complexity": {
            "type": "string",
            "enum": ["basic", "standard", "enterprise"],
            "description": "Use case complexity level"
          },
          "setup_fee_paid": {
            "type": "boolean",
            "default": false,
            "description": "Whether setup fee has been paid"
          }
        },
        "required": ["client_id", "company_name", "tier", "complexity"]
      }
    },
    {
      "name": "quantum_agent.get_subscription_status",
      "description": "Get client subscription status and usage",
      "inputSchema": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Client identifier"
          }
        },
        "required": ["client_id"]
      }
    }
  ],
  "resources": [
    {
      "uri": "datasets://energy/*",
      "name": "Energy Datasets",
      "description": "Energy consumption and optimization datasets",
      "mimeType": "application/json"
    },
    {
      "uri": "datasets://finance/*",
      "name": "Financial Datasets", 
      "description": "Financial market and portfolio datasets",
      "mimeType": "application/json"
    },
    {
      "uri": "datasets://sales/*",
      "name": "Sales Datasets",
      "description": "Sales lead and customer datasets",
      "mimeType": "application/json"
    },
    {
      "uri": "ltc://jobs/{id}",
      "name": "Job Records",
      "description": "Living Technical Codex job records",
      "mimeType": "application/json"
    },
    {
      "uri": "ltc://audits/{id}",
      "name": "Audit Records",
      "description": "Living Technical Codex audit records",
      "mimeType": "application/json"
    }
  ],
  "events": [
    {
      "name": "quantum.job.started",
      "description": "Quantum job started execution"
    },
    {
      "name": "quantum.job.completed",
      "description": "Quantum job completed successfully"
    },
    {
      "name": "quantum.job.failed",
      "description": "Quantum job failed"
    },
    {
      "name": "quantum.provider.registered",
      "description": "New quantum provider registered"
    },
    {
      "name": "quantum.provider.unavailable",
      "description": "Quantum provider became unavailable"
    },
    {
      "name": "quantum.capability.added",
      "description": "New quantum capability added"
    },
    {
      "name": "quantum.audit.recorded",
      "description": "New audit record created"
    }
  ],
  "capabilities": {
    "tools": {
      "listChanged": true,
      "listRequired": false
    },
    "resources": {
      "listChanged": true,
      "listRequired": false
    },
    "events": {
      "listChanged": true,
      "listRequired": false
    }
  },
  "configSchema": {
    "type": "object",
    "properties": {
      "default_provider": {
        "type": "string",
        "description": "Default quantum provider",
        "default": "dynex"
      },
      "max_concurrent_jobs": {
        "type": "integer",
        "description": "Maximum concurrent quantum jobs",
        "default": 10
      },
      "default_timeout": {
        "type": "integer",
        "description": "Default job timeout in seconds",
        "default": 300
      },
      "enable_audit_logging": {
        "type": "boolean",
        "description": "Enable audit logging to LTC",
        "default": true
      },
      "cost_limit": {
        "type": "number",
        "description": "Default cost limit in credits",
        "default": 100.0
      }
    }
  }
}
