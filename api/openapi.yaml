openapi: 3.0.3
info:
  title: Goliath Quantum Starter API (FLYFOX / NQBA)
  version: 0.1.0
  description: |
    OpenAPI spec skeleton for the Goliath / FLYFOX AI NQBA platform.
    Key subsystems: SigmaSelect, Q-Sales Division, Dynex adapter, OpenAI adapter,
    Integrations (UiPath, n8n, Mendix, Prismatic), Marketplace, Partners, Billing.
servers:
  - url: https://api.goliathomniedge.com
    description: Production
  - url: http://localhost:8000
    description: Local

tags:
  - name: auth
    description: Authentication & identity
  - name: partners
    description: Partner onboarding, tiers & management
  - name: leads
    description: Leads, imports, enrichment & scoring
  - name: sigma
    description: SigmaEQ & Quantum Efficiency Intelligence
  - name: qsales
    description: Q-Sales Division & Agent management
  - name: recipes
    description: Drag/drop recipe compilation and execution
  - name: compute
    description: Quantum / GPU compute adapters (Dynex, NVIDIA, OpenAI)
  - name: billing
    description: Billing & partner payouts
  - name: audit
    description: Audit logs / LTC
  - name: integrations
    description: Third-party integrations (UiPath, n8n, Mendix, Prismatic)
  - name: marketplace
    description: Algorithm marketplace & trading
  - name: web3
    description: Blockchain & Web3 functionality

paths:
  /auth/login:
    post:
      tags: [auth]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login success (JWT)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags: [auth]
      summary: Refresh JWT token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /partners/register:
    post:
      tags: [partners]
      summary: Register a partner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartnerRegistrationRequest'
      responses:
        '201':
          description: Partner created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerRegistrationResponse'
        '400':
          description: Invalid registration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /partners/{partner_id}:
    get:
      tags: [partners]
      summary: Get partner details
      parameters:
        - name: partner_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Partner details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'

  /partners/{partner_id}/tier:
    put:
      tags: [partners]
      summary: Update partner tier
      parameters:
        - name: partner_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TierUpdateRequest'
      responses:
        '200':
          description: Tier updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'

  /leads/import:
    post:
      tags: [leads]
      summary: Import leads CSV or JSON
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  type: string
                  description: JSON metadata for import configuration
      responses:
        '202':
          description: Import accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid file format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /leads:
    get:
      tags: [leads]
      summary: List leads with pagination
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: status
          in: query
          schema:
            type: string
            enum: [new, qualified, contacted, converted, lost]
      responses:
        '200':
          description: Leads list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadsListResponse'

  /leads/{lead_id}:
    get:
      tags: [leads]
      summary: Get lead details
      parameters:
        - name: lead_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lead'

  /leads/{lead_id}/score:
    get:
      tags: [leads]
      summary: Get score for a lead
      parameters:
        - name: lead_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Scoring result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreResponse'
        '404':
          description: Lead not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /leads/{lead_id}/enrich:
    post:
      tags: [leads]
      summary: Enrich lead data
      parameters:
        - name: lead_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Enrichment started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

  /sigma/score:
    post:
      tags: [sigma]
      summary: Score a lead or payload using SigmaEQ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lead'
      responses:
        '200':
          description: Score result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreResponse'
        '400':
          description: Invalid scoring data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sigma/models:
    get:
      tags: [sigma]
      summary: List available scoring models
      responses:
        '200':
          description: Available models
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScoringModel'

  /qsales/pods:
    get:
      tags: [qsales]
      summary: List sales pods
      responses:
        '200':
          description: Pods list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pod'

    post:
      tags: [qsales]
      summary: Create new sales pod
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePodRequest'
      responses:
        '201':
          description: Pod created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'

  /qsales/pods/{pod_id}:
    get:
      tags: [qsales]
      summary: Get pod details
      parameters:
        - name: pod_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pod details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'

  /qsales/pods/{pod_id}/agents:
    get:
      tags: [qsales]
      summary: List agents in pod
      parameters:
        - name: pod_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Agents list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Agent'

    post:
      tags: [qsales]
      summary: Add agent to pod
      parameters:
        - name: pod_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAgentRequest'
      responses:
        '201':
          description: Agent created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'

  /recipes:
    get:
      tags: [recipes]
      summary: List recipes
      responses:
        '200':
          description: Recipes list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'

    post:
      tags: [recipes]
      summary: Create new recipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRecipeRequest'
      responses:
        '201':
          description: Recipe created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'

  /recipes/compile:
    post:
      tags: [recipes]
      summary: Compile drag/drop recipe to executable format
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeCompileRequest'
      responses:
        '200':
          description: Recipe compiled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeCompileResponse'
        '400':
          description: Compilation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /recipes/{recipe_id}/execute:
    post:
      tags: [recipes]
      summary: Execute a compiled recipe
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeExecutionRequest'
      responses:
        '202':
          description: Execution started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

  /compute/dynex/submit:
    post:
      tags: [compute]
      summary: Submit job to Dynex quantum compute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynexJobRequest'
      responses:
        '202':
          description: Job submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputeJobResponse'

  /compute/nvidia/submit:
    post:
      tags: [compute]
      summary: Submit job to NVIDIA GPU compute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NvidiaJobRequest'
      responses:
        '202':
          description: Job submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputeJobResponse'

  /compute/openai/submit:
    post:
      tags: [compute]
      summary: Submit job to OpenAI API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAIJobRequest'
      responses:
        '200':
          description: Job completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIJobResponse'

  /compute/jobs/{job_id}:
    get:
      tags: [compute]
      summary: Get compute job status
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputeJobStatus'

  /integrations/uipath/workflows:
    get:
      tags: [integrations]
      summary: List UiPath workflows
      responses:
        '200':
          description: Workflows list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiPathWorkflow'

  /integrations/n8n/workflows:
    get:
      tags: [integrations]
      summary: List n8n workflows
      responses:
        '200':
          description: Workflows list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/N8nWorkflow'

  /integrations/mendix/apps:
    get:
      tags: [integrations]
      summary: List Mendix applications
      responses:
        '200':
          description: Applications list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MendixApp'

  /integrations/prismatic/instances:
    get:
      tags: [integrations]
      summary: List Prismatic integration instances
      responses:
        '200':
          description: Instances list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrismaticInstance'

  /marketplace/algorithms:
    get:
      tags: [marketplace]
      summary: Browse marketplace algorithms
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: price_min
          in: query
          schema:
            type: number
        - name: price_max
          in: query
          schema:
            type: number
      responses:
        '200':
          description: Algorithms list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MarketplaceAlgorithm'

  /marketplace/algorithms/{algorithm_id}/purchase:
    post:
      tags: [marketplace]
      summary: Purchase algorithm from marketplace
      parameters:
        - name: algorithm_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Purchase successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseResponse'

  /web3/wallets:
    get:
      tags: [web3]
      summary: List connected wallets
      responses:
        '200':
          description: Wallets list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wallet'

  /web3/transactions:
    post:
      tags: [web3]
      summary: Submit blockchain transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
      responses:
        '202':
          description: Transaction submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'

  /billing/invoices:
    get:
      tags: [billing]
      summary: List invoices
      parameters:
        - name: partner_id
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, paid, overdue, cancelled]
      responses:
        '200':
          description: Invoices list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'

  /billing/payouts:
    get:
      tags: [billing]
      summary: List partner payouts
      parameters:
        - name: partner_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Payouts list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payout'

  /audit/logs:
    get:
      tags: [audit]
      summary: Get audit logs
      parameters:
        - name: start_date
          in: query
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          schema:
            type: string
            format: date-time
        - name: action
          in: query
          schema:
            type: string
        - name: user_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Audit logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: integer
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        role:
          type: string
          enum: [admin, partner, user]
        created_at:
          type: string
          format: date-time

    PartnerRegistrationRequest:
      type: object
      required: [company_name, contact_email, tier]
      properties:
        company_name:
          type: string
        contact_email:
          type: string
          format: email
        contact_name:
          type: string
        tier:
          type: string
          enum: [bronze, silver, gold, platinum]
        description:
          type: string

    PartnerRegistrationResponse:
      type: object
      properties:
        partner_id:
          type: string
        api_key:
          type: string
        status:
          type: string
          enum: [pending, approved, rejected]

    Partner:
      type: object
      properties:
        id:
          type: string
        company_name:
          type: string
        contact_email:
          type: string
        tier:
          type: string
          enum: [bronze, silver, gold, platinum]
        status:
          type: string
          enum: [active, suspended, terminated]
        created_at:
          type: string
          format: date-time
        revenue_share:
          type: number
          format: float

    TierUpdateRequest:
      type: object
      required: [tier]
      properties:
        tier:
          type: string
          enum: [bronze, silver, gold, platinum]
        effective_date:
          type: string
          format: date

    Lead:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        company:
          type: string
        phone:
          type: string
        status:
          type: string
          enum: [new, qualified, contacted, converted, lost]
        source:
          type: string
        created_at:
          type: string
          format: date-time
        custom_fields:
          type: object
          additionalProperties: true

    LeadsListResponse:
      type: object
      properties:
        leads:
          type: array
          items:
            $ref: '#/components/schemas/Lead'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer

    ScoreResponse:
      type: object
      properties:
        lead_id:
          type: string
        score:
          type: number
          format: float
          minimum: 0
          maximum: 100
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
        factors:
          type: array
          items:
            $ref: '#/components/schemas/ScoreFactor'
        model_version:
          type: string
        scored_at:
          type: string
          format: date-time

    ScoreFactor:
      type: object
      properties:
        name:
          type: string
        weight:
          type: number
          format: float
        value:
          type: number
          format: float
        impact:
          type: string
          enum: [positive, negative, neutral]

    ScoringModel:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        description:
          type: string
        accuracy:
          type: number
          format: float
        created_at:
          type: string
          format: date-time

    Pod:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [active, inactive, maintenance]
        agent_count:
          type: integer
        performance_metrics:
          $ref: '#/components/schemas/PodMetrics'
        created_at:
          type: string
          format: date-time

    PodMetrics:
      type: object
      properties:
        conversion_rate:
          type: number
          format: float
        avg_response_time:
          type: number
          format: float
        total_interactions:
          type: integer
        success_rate:
          type: number
          format: float

    CreatePodRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
        description:
          type: string
        configuration:
          type: object
          additionalProperties: true

    Agent:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [chatbot, voice, email, sms]
        status:
          type: string
          enum: [active, inactive, training]
        pod_id:
          type: string
        configuration:
          type: object
          additionalProperties: true
        performance:
          $ref: '#/components/schemas/AgentMetrics'

    AgentMetrics:
      type: object
      properties:
        interactions_today:
          type: integer
        success_rate:
          type: number
          format: float
        avg_response_time:
          type: number
          format: float
        satisfaction_score:
          type: number
          format: float

    CreateAgentRequest:
      type: object
      required: [name, type]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [chatbot, voice, email, sms]
        configuration:
          type: object
          additionalProperties: true

    Recipe:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        version:
          type: string
        status:
          type: string
          enum: [draft, compiled, published, deprecated]
        flow_definition:
          type: object
          additionalProperties: true
        compiled_code:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateRecipeRequest:
      type: object
      required: [name, flow_definition]
      properties:
        name:
          type: string
        description:
          type: string
        flow_definition:
          type: object
          additionalProperties: true

    RecipeCompileRequest:
      type: object
      required: [flow_definition]
      properties:
        flow_definition:
          type: object
          description: Drag/drop flow definition from Pipeline Builder
          additionalProperties: true
        optimization_level:
          type: string
          enum: [basic, optimized, aggressive]
          default: optimized
        target_runtime:
          type: string
          enum: [python, javascript, quantum]
          default: python

    RecipeCompileResponse:
      type: object
      properties:
        recipe_id:
          type: string
        compiled_code:
          type: string
        execution_plan:
          type: object
          additionalProperties: true
        estimated_cost:
          type: number
          format: float
        estimated_duration:
          type: integer
          description: Estimated execution time in seconds
        warnings:
          type: array
          items:
            type: string

    RecipeExecutionRequest:
      type: object
      properties:
        input_data:
          type: object
          additionalProperties: true
        execution_options:
          type: object
          additionalProperties: true

    DynexJobRequest:
      type: object
      required: [problem_type, problem_data]
      properties:
        problem_type:
          type: string
          enum: [optimization, sampling, annealing]
        problem_data:
          type: object
          additionalProperties: true
        num_reads:
          type: integer
          default: 1000
        chain_strength:
          type: number
          format: float

    NvidiaJobRequest:
      type: object
      required: [model_type, input_data]
      properties:
        model_type:
          type: string
          enum: [llm, vision, speech]
        input_data:
          type: object
          additionalProperties: true
        gpu_type:
          type: string
          enum: [A100, H100, V100]
        max_tokens:
          type: integer

    OpenAIJobRequest:
      type: object
      required: [model, messages]
      properties:
        model:
          type: string
          enum: [gpt-4, gpt-3.5-turbo, dall-e-3]
        messages:
          type: array
          items:
            type: object
            properties:
              role:
                type: string
                enum: [system, user, assistant]
              content:
                type: string
        max_tokens:
          type: integer
        temperature:
          type: number
          format: float

    ComputeJobResponse:
      type: object
      properties:
        job_id:
          type: string
        status:
          type: string
          enum: [queued, running, completed, failed]
        estimated_completion:
          type: string
          format: date-time
        cost_estimate:
          type: number
          format: float

    OpenAIJobResponse:
      type: object
      properties:
        job_id:
          type: string
        result:
          type: object
          additionalProperties: true
        usage:
          type: object
          properties:
            prompt_tokens:
              type: integer
            completion_tokens:
              type: integer
            total_tokens:
              type: integer
        cost:
          type: number
          format: float

    ComputeJobStatus:
      type: object
      properties:
        job_id:
          type: string
        status:
          type: string
          enum: [queued, running, completed, failed, cancelled]
        progress:
          type: number
          format: float
          minimum: 0
          maximum: 100
        result:
          type: object
          additionalProperties: true
        error:
          type: string
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        cost:
          type: number
          format: float

    UiPathWorkflow:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [active, inactive]
        last_execution:
          type: string
          format: date-time

    N8nWorkflow:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        active:
          type: boolean
        nodes:
          type: integer
        last_execution:
          type: string
          format: date-time

    MendixApp:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        status:
          type: string
          enum: [running, stopped, deploying]
        url:
          type: string
          format: uri

    PrismaticInstance:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        integration_name:
          type: string
        status:
          type: string
          enum: [active, inactive, error]
        last_execution:
          type: string
          format: date-time

    MarketplaceAlgorithm:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        price:
          type: number
          format: float
        rating:
          type: number
          format: float
        downloads:
          type: integer
        author:
          type: string
        license:
          type: string

    PurchaseResponse:
      type: object
      properties:
        transaction_id:
          type: string
        algorithm_id:
          type: string
        price_paid:
          type: number
          format: float
        license_key:
          type: string
        download_url:
          type: string
          format: uri

    Wallet:
      type: object
      properties:
        id:
          type: string
        address:
          type: string
        network:
          type: string
          enum: [ethereum, polygon, bsc, solana]
        balance:
          type: number
          format: float
        currency:
          type: string

    TransactionRequest:
      type: object
      required: [to, amount, network]
      properties:
        to:
          type: string
        amount:
          type: number
          format: float
        network:
          type: string
          enum: [ethereum, polygon, bsc, solana]
        gas_price:
          type: number
          format: float
        data:
          type: string

    TransactionResponse:
      type: object
      properties:
        transaction_hash:
          type: string
        status:
          type: string
          enum: [pending, confirmed, failed]
        network:
          type: string
        gas_used:
          type: number
        cost:
          type: number
          format: float

    Invoice:
      type: object
      properties:
        id:
          type: string
        partner_id:
          type: string
        amount:
          type: number
          format: float
        currency:
          type: string
        status:
          type: string
          enum: [pending, paid, overdue, cancelled]
        due_date:
          type: string
          format: date
        created_at:
          type: string
          format: date-time

    Payout:
      type: object
      properties:
        id:
          type: string
        partner_id:
          type: string
        amount:
          type: number
          format: float
        currency:
          type: string
        status:
          type: string
          enum: [pending, processed, failed]
        processed_at:
          type: string
          format: date-time

    AuditLog:
      type: object
      properties:
        id:
          type: string
        timestamp:
          type: string
          format: date-time
        user_id:
          type: string
        action:
          type: string
        resource:
          type: string
        details:
          type: object
          additionalProperties: true
        ip_address:
          type: string
        user_agent:
          type: string

    TaskResponse:
      type: object
      properties:
        task_id:
          type: string
        status:
          type: string
          enum: [queued, running, completed, failed]
        created_at:
          type: string
          format: date-time
        estimated_completion:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: integer
        details:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time

security:
  - bearerAuth: []