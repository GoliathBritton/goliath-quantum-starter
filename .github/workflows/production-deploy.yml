# NQBA Platform - Production CI/CD Pipeline
# Automated testing, building, and deployment workflow

name: Production Deployment Pipeline

on:
  push:
    branches:
      - main
      - production
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nqba-platform
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # Code Quality and Security Checks
  # =============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run code formatting check
      run: |
        black --check --diff .
        isort --check-only --diff .
    
    - name: Run linting
      run: |
        flake8 .
        pylint src/ --exit-zero
    
    - name: Run type checking
      run: mypy src/
    
    - name: Run security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        safety check --json --output safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # =============================================================================
  # Unit and Integration Tests
  # =============================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_nqba
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up test environment
      run: |
        cp deploy/configs/production.env .env.test
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_nqba" >> .env.test
        echo "REDIS_URL=redis://localhost:6379/0" >> .env.test
        echo "ENVIRONMENT=test" >> .env.test
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --junitxml=junit.xml
    
    - name: Run integration tests
      run: |
        pytest test_integration.py -v --tb=short
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          junit.xml
          htmlcov/
          coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # =============================================================================
  # Build and Push Docker Images
  # =============================================================================
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    timeout-minutes: 45
    
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      worker-image: ${{ steps.meta-worker.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract API metadata
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deploy/docker/Dockerfile.api
        target: runtime
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Extract Worker metadata
      id: meta-worker
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/worker
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Worker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deploy/docker/Dockerfile.worker
        target: runtime
        push: true
        tags: ${{ steps.meta-worker.outputs.tags }}
        labels: ${{ steps.meta-worker.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: landing-page/package-lock.json
    
    - name: Extract Frontend metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: landing-page
        file: landing-page/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.api-image }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Snyk security scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ needs.build.outputs.api-image }}
        args: --severity-threshold=high

  # =============================================================================
  # Deploy to Staging
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging-api.nqba.flyfox.ai
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name nqba-staging-cluster
    
    - name: Deploy to staging
      run: |
        # Update image tags in manifests
        sed -i "s|nqba-platform/api:latest|${{ needs.build.outputs.api-image }}|g" deploy/k8s/api-deployment.yaml
        sed -i "s|nqba-platform/worker:latest|${{ needs.build.outputs.worker-image }}|g" deploy/k8s/worker-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f deploy/k8s/namespace.yaml
        kubectl apply -f deploy/security/
        kubectl apply -f deploy/k8s/
        
        # Wait for rollout
        kubectl rollout status deployment/nqba-api -n nqba-platform --timeout=300s
        kubectl rollout status deployment/nqba-worker -n nqba-platform --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=nqba-platform,component=api -n nqba-platform --timeout=300s
        
        # Run basic health checks
        API_URL=$(kubectl get service nqba-api -n nqba-platform -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        curl -f "http://${API_URL}/health" || exit 1
        curl -f "http://${API_URL}/ready" || exit 1

  # =============================================================================
  # Deploy to Production
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan, deploy-staging]
    if: |
      (github.ref == 'refs/heads/production' || startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production') &&
      (github.event.inputs.force_deploy == 'true' || needs.deploy-staging.result == 'success')
    environment:
      name: production
      url: https://api.nqba.flyfox.ai
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name nqba-production-cluster
    
    - name: Pre-deployment backup
      run: |
        # Create database backup
        kubectl create job --from=cronjob/nqba-backup nqba-backup-$(date +%Y%m%d-%H%M%S) -n nqba-platform
    
    - name: Deploy to production
      run: |
        # Update image tags in manifests
        sed -i "s|nqba-platform/api:latest|${{ needs.build.outputs.api-image }}|g" deploy/k8s/api-deployment.yaml
        sed -i "s|nqba-platform/worker:latest|${{ needs.build.outputs.worker-image }}|g" deploy/k8s/worker-deployment.yaml
        
        # Apply Kubernetes manifests with rolling update
        kubectl apply -f deploy/k8s/namespace.yaml
        kubectl apply -f deploy/security/
        kubectl apply -f deploy/k8s/
        
        # Wait for rollout with extended timeout
        kubectl rollout status deployment/nqba-api -n nqba-platform --timeout=600s
        kubectl rollout status deployment/nqba-worker -n nqba-platform --timeout=600s
    
    - name: Post-deployment verification
      run: |
        # Wait for all pods to be ready
        kubectl wait --for=condition=ready pod -l app=nqba-platform -n nqba-platform --timeout=600s
        
        # Run comprehensive health checks
        API_URL=$(kubectl get service nqba-api -n nqba-platform -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Health endpoint
        curl -f "http://${API_URL}/health" || exit 1
        
        # Ready endpoint
        curl -f "http://${API_URL}/ready" || exit 1
        
        # Metrics endpoint
        curl -f "http://${API_URL}/metrics" || exit 1
        
        # API functionality test
        curl -f -X POST "http://${API_URL}/api/v1/health" \
          -H "Content-Type: application/json" \
          -d '{"test": true}' || exit 1
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Production deployment successful!"
        echo "API URL: https://api.nqba.flyfox.ai"
        echo "Frontend URL: https://nqba.flyfox.ai"
    
    - name: Rollback on failure
      if: failure()
      run: |
        echo "❌ Deployment failed, initiating rollback..."
        kubectl rollout undo deployment/nqba-api -n nqba-platform
        kubectl rollout undo deployment/nqba-worker -n nqba-platform
        kubectl rollout status deployment/nqba-api -n nqba-platform --timeout=300s
        kubectl rollout status deployment/nqba-worker -n nqba-platform --timeout=300s

  # =============================================================================
  # Cleanup
  # =============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "Cleaning up old container images..."
        # This would typically involve calling a cleanup script
        # that removes old images from the registry