name: Manual Run

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - quantum
        - lint
        - security
      python_version:
        description: 'Python version to use'
        required: true
        default: '3.11'
        type: choice
        options:
        - '3.8'
        - '3.9'
        - '3.10'
        - '3.11'

jobs:
  manual-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ github.event.inputs.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ github.event.inputs.python_version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Run Unit Tests
      if: github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all'
      run: |
        pytest tests/ -m unit -v
    
    - name: Run Integration Tests
      if: github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all'
      run: |
        pytest tests/ -m integration -v
        python test_integration.py
    
    - name: Run Quantum Tests
      if: github.event.inputs.test_type == 'quantum' || github.event.inputs.test_type == 'all'
      run: |
        pytest tests/ -m quantum -v
        python src/goliath/quantum/examples/run_qubo_demo.py
    
    - name: Run Linting
      if: github.event.inputs.test_type == 'lint' || github.event.inputs.test_type == 'all'
      run: |
        pip install black flake8 mypy
        black --check --diff src/ tests/
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        mypy src/ --ignore-missing-imports
    
    - name: Run Security Checks
      if: github.event.inputs.test_type == 'security' || github.event.inputs.test_type == 'all'
      run: |
        pip install bandit safety
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        echo "Security reports generated"
    
    - name: Upload Security Reports
      if: github.event.inputs.test_type == 'security' || github.event.inputs.test_type == 'all'
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          bandit-report.json
          safety-report.json

